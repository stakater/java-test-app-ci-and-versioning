# Work in progress: Sample ci pipeline file
pipelines:
  build:
    group: java-test-app
    environment_variables:
      BUILD_IMAGE_NAME: java-test-app-build
    materials:
      application:
        git: git@github.com:stakater/java-test-app-ci-and-versioning.git
        destination: application
        auto_update: true
        shallow_clone: true
      ci-metadata:
        git: git@github.com:stakater/app-ci-metadata.git
        destination: ci-metadata
        auto_update: false
        shallow_clone: true
      pipeline-library:
        git: https://github.com/stakater/pipeline-library.git
        destination: pipeline-library
        auto_update: false
        shallow_clone: true
    stages:
      - create-build-image:
          jobs:
            build-image:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git config --global user.email 'gocd.stakater@gmail.com'; \
                         git config --global user.name 'gocd-stakater'; \
                         git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec: 
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "app_name=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/application/app-info.yml -p application.name); \
                         python3 ./pipeline-library/versioning/inc-build-number.py -f $(pwd)/ci-metadata/${app_name}"
                - exec:
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "sudo docker build -f ./application/deployment/build/Dockerfile -t ${BUILD_IMAGE_NAME} ./application"
                - exec: 
                    run_if: any
                    command: /bin/bash
                    arguments: 
                      - "-c"
                      - "sudo docker rmi $(sudo docker images | grep none | awk '{print $3}') || true"
      - compile: # name of stage
          jobs:
            compile: # name of the job
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec: # indicates type of task
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "sudo docker run --rm --name ${BUILD_IMAGE_NAME}-compile -v /home/.gradle:/root/.gradle -v /home/.m2:/root/.m2 ${BUILD_IMAGE_NAME} gradle clean -x test build --info"
      - test:
          jobs:
            gradle-tests:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec:
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "sudo docker run --rm --name ${BUILD_IMAGE_NAME}-test -v /home/.gradle:/root/.gradle -v /home/.m2:/root/.m2 ${BUILD_IMAGE_NAME} gradle test"
      - package: # name of stage
          jobs:
            package: # name of the job
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec: # Generate new version
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "app_name=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/application/app-info.yml -p application.name); \
                         python3 ./pipeline-library/versioning/generate-version.py -f $(pwd)/ci-metadata/${app_name} -d $(pwd)/application; \
                         python3 ./pipeline-library/versioning/tag-release.py -f $(pwd)/ci-metadata/${app_name}/app-ci-info.yml -d $(pwd)/application;"
                - exec: # Run Package
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "app_name=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/application/app-info.yml -p application.name); \
                         current_version=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/ci-metadata/${app_name}/app-ci-info.yml -p ci-data.current-version); \
                         sudo docker run --rm --name ${BUILD_IMAGE_NAME}-package -v /home/.gradle:/root/.gradle -v /home/.m2:/root/.m2 -v /stakater/outputs/${app_name}:/home/aurora/build/libs/ ${BUILD_IMAGE_NAME} gradle -Poutput_name=${app_name} -Pversion=${current_version} war"
      - publish-nexus:
          jobs:
            push:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec:
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "app_name=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/application/app-info.yml -p application.name); \
                         current_version=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/ci-metadata/${app_name}/app-ci-info.yml -p ci-data.current-version); \
                         sudo docker run --rm --name ${BUILD_IMAGE_NAME}-push-nexus -v /home/.gradle:/root/.gradle -v /home/.m2:/root/.m2 \
                                         --dns=${CONSUL_DNS} \
                                         --dns-search=service.consul \
                                         ${BUILD_IMAGE_NAME} \
                                         gradle -Poutput_name=${app_name} -Pversion=${current_version} -Pnexus.host=nexus upload"
      - publish-docker-registry:
          jobs:
            build-and-push:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "git -C ./ci-metadata pull; \
                         git -C ./pipeline-library pull"
                - exec:
                    run_if: passed
                    command: /bin/bash
                    arguments:
                      - "-c"
                      - "app_name=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/application/app-info.yml -p application.name); \
                         current_version=$(python3 ./pipeline-library/util/read-from-yml.py -f $(pwd)/ci-metadata/${app_name}/app-ci-info.yml -p ci-data.current-version); \
                         output_folder_name=output; \
                         mkdir -p ./application/deployment/publish/${output_folder_name}; \
                         output_file_name=${app_name}-${current_version}.war; \
                         cp /stakater/outputs/${app_name}/${output_file_name} ./application/deployment/publish/output/; \
                         docker_image_name=docker-registry:5000/${app_name}:${current_version//+/.}; \
                         sudo docker build --build-arg OUTPUT_PATH=${output_folder_name} --build-arg OUTPUT_FILE_NAME=${output_file_name} -t ${docker_image_name} -f ./application/deployment/publish/Dockerfile ./application/deployment/publish; \
                         sudo docker push ${docker_image_name}"